<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据库事务与索引整理</title>
    <link href="/2021/09/17/sql/"/>
    <url>/2021/09/17/sql/</url>
    
    <content type="html"><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="数据库中的事务是什么"><a href="#数据库中的事务是什么" class="headerlink" title="数据库中的事务是什么?"></a>数据库中的事务是什么?</h2><p><strong>事务</strong>（transaction）是作为一个单元的一组有序的数据库操作。如果组中的所有操作都成功，则认为事务成功，<br>即使只有一个操作失败，事务也不成功。如果所有操作完成，事务则提交，其修改将作用于所有其他数据库进程。<br>如果一个操作失败，则事务将回滚，该事务所有操作的影响都将取消。</p><h2 id="ACID事务特性："><a href="#ACID事务特性：" class="headerlink" title="ACID事务特性："></a>ACID事务特性：</h2><p>1、原子性：即不可分割性，事务要么全部被执行，要么就全部不被执行。<br>2、一致性或可串性：事务的执行使得数据库从一种正确状态转换成另一种正确状态<br>3、隔离性：在事务正确提交之前，不允许把该事务对数据的任何改变提供给任何其他事务<br>4、持久性：事务正确提交后，其结果将永久保存在数据库中，即使在事务提交后有了其他故障，事务的处理结果也会得到保存</p><h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>READ-UNCOMMITTED</td><td>√</td><td>√</td><td>√</td></tr><tr><td>READ-COMMITTED</td><td>×</td><td>√</td><td>√</td></tr><tr><td>REPEATABLE-READ</td><td>×</td><td>√</td><td>√</td></tr><tr><td>SERIALIZABLE</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><p>MySQL InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读）</p><h2 id="并发事务可能带来的问题"><a href="#并发事务可能带来的问题" class="headerlink" title="并发事务可能带来的问题"></a>并发事务可能带来的问题</h2><p>1.<strong>脏读</strong>：事务对数据进行修改但未提交至数据库，另一个事务访问同一数据称为脏数据，依据该数据进行的操作可能是不正确的<br>2.<strong>丢失修改</strong>：两个事务同时对同一数据进行修改操作，第二个事务的修改结果可能会覆盖第一个事务的结果，造成修改数据错误<br>3.<strong>不可重复读</strong>：在一个事务多次访问同一数据的期间，另一个并发事务访问该数据并进行修改，可能导致该事务多次访问的数据不同<br>4.<strong>幻读</strong>：在一个事务多次查询特定记录期间，另一个并发事务插入了几条记录，可能导致该事务多次查询结果不相同</p><h2 id="大表优化方式："><a href="#大表优化方式：" class="headerlink" title="大表优化方式："></a>大表优化方式：</h2><ul><li>1.字段：<ul><li>1.1尽量使用TINYINT、SMALLINT、MEDIUM_INT作为整数类型而非INT，如果非负则加上UNSIGNED</li><li>1.2VARCHAR的长度只分配真正需要的空间</li><li>1.3使用枚举或整数代替字符串类型</li><li>1.4尽量使用TIMESTAMP而非DATETIME，</li><li>1.5单表不要有太多字段，建议在20以内</li><li>1.6避免使用NULL字段，很难查询优化且占用额外索引空间</li><li>1.7用整型来存IP</li></ul></li></ul><p>2.限定数据范围<br>3.读写分离：主库负责写，从库负责读<br>4.垂直分区：将数据表列拆分<br>5.水平分区：保持数据表结构不变，通过某种策略存储数据分片。这样每一片数据分散到不同的表或者库中，达到了分布式的目的。 水平拆分可以支撑非常大的数据量。</p><h2 id="简述在-MySQL-数据库中-MyISAM-和-InnoDB-的区别"><a href="#简述在-MySQL-数据库中-MyISAM-和-InnoDB-的区别" class="headerlink" title="简述在 MySQL 数据库中 MyISAM 和 InnoDB 的区别"></a>简述在 MySQL 数据库中 MyISAM 和 InnoDB 的区别</h2><ul><li>MyISAM： <ul><li>1.不支持事务，但是每次查询都是原子的；</li><li>2.支持表级锁，即每次操作是对整个表加锁；</li><li>3.存储表的总行数； </li><li>4.一个 MYISAM 表有三个文件：索引文件、表结构文件、数据文件；</li><li>5.采用非聚集索引，索引文件的数据域存储指向数据文件的指针。</li><li>6.辅索引与主索引基本一致，但是辅索引不用保证唯一性。 </li></ul></li><li>InnoDb：<ul><li>1.支持 ACID 的事务，支持事务的四种隔离级别；</li><li>2.支持行级锁及外键约束：因此可以支持写并发；<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><h3 id="索引的目的是什么？"><a href="#索引的目的是什么？" class="headerlink" title="索引的目的是什么？"></a>索引的目的是什么？</h3></li></ul></li></ul><p>1.快速访问数据表中的特定信息，提高检索速度<br>2.创建唯一性索引，保证数据库表中每一行数据的唯一性。<br>3.加速表和表之间的连接<br>4.使用分组和排序子句进行数据检索时，可以显著减少查询中分组和排序的时间</p><h3 id="索引对数据库系统的负面影响是什么？"><a href="#索引对数据库系统的负面影响是什么？" class="headerlink" title="索引对数据库系统的负面影响是什么？"></a>索引对数据库系统的负面影响是什么？</h3><p>负面影响：<br><strong>创建</strong>索引和维护索引需要耗费时间，这个时间随着<strong>数据量</strong>的增加而增加；<br>索引需要占用<strong>物理空间</strong>，不光是表需要占用数据空间，每个索引也需要占用物理空间；<br>当对表进行增、删、改、的时候索引也要动态维护，这样就降低了数据的维护速度。</p><h3 id="为数据表建立索引的原则有哪些？"><a href="#为数据表建立索引的原则有哪些？" class="headerlink" title="为数据表建立索引的原则有哪些？"></a>为数据表建立索引的原则有哪些？</h3><p>在最频繁使用的、用以缩小查询范围的字段上建立索引。<br>在频繁使用的、需要排序的字段上建立索引</p><h3 id="什么情况下不宜建立索引？"><a href="#什么情况下不宜建立索引？" class="headerlink" title="什么情况下不宜建立索引？"></a>什么情况下不宜建立索引？</h3><p>对于查询中很少涉及的列或者重复值比较多的列，不宜建立索引。<br>对于一些特殊的数据类型，不宜建立索引，比如文本字段（text）等</p><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h3 id="什么是乐观锁"><a href="#什么是乐观锁" class="headerlink" title="什么是乐观锁"></a>什么是乐观锁</h3><p>乐观锁认为一个用户读数据的时候，别人不会去写自己所读的数据；<br>悲观锁就刚好相反，觉得自己读数据库的时候，别人可能刚好在写自己刚读的数据，</p><h4 id="乐观锁的实现方式："><a href="#乐观锁的实现方式：" class="headerlink" title="乐观锁的实现方式："></a>乐观锁的实现方式：</h4><p><strong>版本号</strong>：给数据增加一个版本标识，在数据库上就是表中增加一个version字段，<br>每次更新把这个字段加1，读取数据的时候把version读出来，更新的时候比较version，如果还是开始读取的version就可以更新了，<br>如果现在的version比老的version大，说明有其他事务更新了该数据，并增加了版本号，<br>这时候得到一个无法更新的通知，用户自行根据这个通知来决定怎么处理<br><strong>时间戳</strong>（timestamp）：和版本号基本一样，只是通过时间戳来判断而已，<br>注意时间戳要使用数据库服务器的时间戳不能是业务系统的时间。<br><strong>待更新字段</strong>：和版本号方式相似，只是不增加额外字段，直接使用有效数据字段做版本控制信息</p><h3 id="什么是悲观锁"><a href="#什么是悲观锁" class="headerlink" title="什么是悲观锁"></a>什么是悲观锁</h3><p>悲观锁就是在读取数据的时候，为了不让别人修改自己读取的数据，就会先对数据加锁，只有自己把数据读完了，才允许别人修改那部分数据，</p><h4 id="悲观锁按性质分："><a href="#悲观锁按性质分：" class="headerlink" title="悲观锁按性质分："></a>悲观锁按性质分：</h4><p>排他锁（x锁）：事务A对对象T加s锁，其他事务也只能对T加S，多个事务可以<strong>同时读</strong>，但<strong>不能有写操作</strong>，直到A释放S锁。<br>共享锁（s锁）：事务A对对象T加X锁以后，其他事务<strong>不能对T加任何锁</strong>，只有事务A可以读写对象T直到A释放X锁。<br>更新锁（u锁）：用来预定要对此对象施加X锁，它<strong>允许其他事务读</strong>，但<strong>不允许再施加U锁或X锁</strong>；当被读取的对象将要被更新时，则升级为X锁，主要是用来防止死锁的</p><h3 id="什么是行级锁"><a href="#什么是行级锁" class="headerlink" title="什么是行级锁"></a>什么是行级锁</h3><p>行级锁是一种排他锁，防止其他事务修改此行；在使用以下语句时， Oracle 会自动应用行级锁：</p><ol><li>INSERT、 UPDATE、 DELETE、 SELECT … FOR UPDATE [OF columns] [WAIT n | NOWAIT];</li><li>SELECT … FOR UPDATE 语句允许用户一次锁定多条记录进行更新</li><li>使用 COMMIT 或 ROLLBACK 语句释放锁。<h3 id="什么是表级锁"><a href="#什么是表级锁" class="headerlink" title="什么是表级锁"></a>什么是表级锁</h3>表示对当前操作的整张表加锁，它实现简单，资源消耗较少，被大部分 MySQL 引擎支持。<br>最常使用的MYISAM 与 INNODB 都支持表级锁定。表级锁定分为表共享读锁（共享锁）与表独占写锁（排他锁）。 <h3 id="什么是页级锁"><a href="#什么是页级锁" class="headerlink" title="什么是页级锁"></a>什么是页级锁</h3>页级锁是 MySQL 中锁定粒度介于行级锁和表级锁中间的一种锁。<strong>表级锁速度快，但冲突多，行级冲突少，但速度慢。</strong><br>所以取了折衷的页级，一次锁定相邻的一组记录。<h2 id="数据库三大范式："><a href="#数据库三大范式：" class="headerlink" title="数据库三大范式："></a>数据库三大范式：</h2>第一范式：<strong>属性</strong>不可分<br>第二范式：非主属性不存在对主键的<strong>部分依赖</strong><br>第三范式：非主属性不存在对主键的<strong>传递依赖</strong><h2 id="数据库索引："><a href="#数据库索引：" class="headerlink" title="数据库索引："></a>数据库索引：</h2>主键的作用：</li></ol><p>1.可以保证实体的完整性；<br>2.能够加快数据库的操作速度；<br>3.确定数据唯一性<br>…</p><h3 id="为什么主键能加快数据库的操作速度？–-gt-为什么索引能加快数据库操作速度？"><a href="#为什么主键能加快数据库的操作速度？–-gt-为什么索引能加快数据库操作速度？" class="headerlink" title="为什么主键能加快数据库的操作速度？–&gt;为什么索引能加快数据库操作速度？"></a>为什么主键能加快数据库的操作速度？–&gt;为什么索引能加快数据库操作速度？</h3><p>在没有添加主键的表，它的数据无序的放置在磁盘存储器上，一行一行的排列<br>如果给表上了主键，那么表在磁盘上的存储结构就由整齐排列的结构转变成了树状结构，<br>也就是上面说的「B Tree/B+ Tree」结构，换句话说，就是整个表就变成了一个索引。<br><strong>主键的作用就是把「表」的数据格式转换成「索引（平衡树）」的格式放置。</strong></p><p>非聚簇索引与树结构无关，与树存放的内容有关；<br>1.data域存放的是数据记录的地址，然后以data域的值为地址读取相应的数据记录。这被称为“非聚簇索引”。<br>2.data域保存了完整的数据记录，这个索引的key是数据表的主键，这被称为“聚簇索引（或聚集索引）”。</p><p><img src="/img/1.jpg"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/09/16/hello-world/"/>
    <url>/2021/09/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
